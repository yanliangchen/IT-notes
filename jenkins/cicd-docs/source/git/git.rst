git
--------

* Linus 用 C 语言编写而成
* 2005 年诞生
* 分布式版本管理系统
* 速度快，适合大规模，跨地区多人协同开发

版本管理的发展历史
++++++++++++++++++++
1. 本地版本管理

    .. image:: /images/git/本地化版本管理.png

    用简单的数据库来记录文件的历次更新差异。
    本地版本控制系统存在的问题，只要整个项目的历史记录被保存在单一位置，就有丢失所有历史更新记录的风险。

2. 集中化的版本控制系统

    .. image:: /images/git/集中化版本管理.png

    用单一的几种管理的服务器，来保存所有文件的修订版本，而协同工作的人们都通过客户端连接到这台服务器，下载最新的代码或者是更新提交。
    但是如果中央服务器宕机了，那宕机的这一段时间，大舅都没有办法提交更新，没办法协同工作。而且中央服务器的数据么有做备份而且损坏，所有记录就会丢失了。

3. 分布式版本控制

    .. image:: /images/git/分布式版本管理.png

    分布式最大的特点就是客户端并不只是提取最新版本的文件快照，而是把代码仓库完整的镜像下来，每个客户端其实都可以当做是中央服务器，当中央服务器数据损坏了，从任何一个本地客户端都可以重新恢复。而且我们这样过在家也可以提交代码了，我们提交代码是提交到本地服务器，所以效率大大提高。近乎所有操作都是在本地执行、保证完整性、一般只添加数据库。

git 原理
+++++++++++++++++

四个区域
""""""""""

需要关注 git 实现机制中的一块就是 git 的四个区域：工作区域、暂存区域、本地仓库、远程仓库。

.. image:: /images/git/git四个区域一.png

.. image:: /images/git/git四个区域二.png

* 工作区域

    工作区就是我们当前项目目录内，所有修改都是在工作区内进行。

* 暂存区域

    暂存区（stage）也叫索引区（index），本地文件修改之后，add 操作会将修改添加大暂存区，那么本地和暂存区修改保持一致。

    .. image:: /images/git/暂存区.png

* 本地仓库

    通过 clone 或者 init 目录之后，本地仓库便建立了，我们所有的修改，都要先提交到本地，是通过暂存区提交的（可以通过工作区直接提交到本地仓库）。

    如暂存区域图片所示，通过 git commit 即可把 stage 区域的修改提交到本地仓库。每一次提交都会生成一个版本号，版本号是 SHA-1 编码的编号。

* 远程仓库

    远程仓库是放在远程服务器上，虽然说 git 是一个分布式版本控制系统，但是一般我们 worker 都会使用同一个远程仓库，这点感觉和 svn 并没有太大差别，只是 remote 挂掉之后，我们每个 worker 可以互相用对方的 repo (修改 repo 地址即可)。
    通过 clone 可以把远程仓库 clone 下拉，push 操作将本地的仓库版本提交到远程仓库。

* 本地远程分支和远程分支

    git 本地仓库其实还会分为本地分支、本地远程分支。git fetch 拉下来的代码会放到本地远程分支上而不是直接合并到本地分支。

    可以通过 ``git branch`` 查看本地远程分支。

    .. code-block:: none

        git pull orgin master = git fetch origin master + git merge origin/master

    这个比较重要，一定要引起注意。

* 常用命令

    ============================   =====================================================
    命令                            内容
    ============================   =====================================================
    ``git add``                     加入暂存区域（索引区）
    ``git status``                  查看状态
    ``git status -s``               状态概览
    ``git diff``                    尚未暂存的文件
    ``git diff --staged``           暂存区域文件
    ``git commit``                  提交更新
    ``git reset``                   回滚
    ``git rm``                      从版本库中移除
    ``git rm --cached README``      从暂存区域中移除
    ``git mv``                      相当于 ``mv`` ``git rm`` ``git add`` 三个命令
    ============================   =====================================================

.. include:: /git/install.rst 
.. include:: /git/branch.rst
.. include:: /git/advanced.rst
.. include:: /git/remote.rst